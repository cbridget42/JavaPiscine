package edu.school21.orm;

import com.sun.xml.internal.txw2.IllegalAnnotationException;

import javax.sql.DataSource;
import java.lang.reflect.Field;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

public class OrmManager {
    DataSource dataSource;

    public OrmManager(String packageName, DataSource dataSource) {
        this.dataSource = dataSource;
        try {
            URI uri = Objects.requireNonNull(OrmManager.class.getClassLoader()
                            .getResource(packageName.replace('.', '/')))
                    .toURI();
            Stream<Path> stream = Files.walk(Paths.get(uri), 1);
            stream.forEach(element -> {
                String str = element.toString();
                if (str.endsWith(".class")) {
                    str = str.substring(str.lastIndexOf('/') + 1, str.lastIndexOf('.'));
                    Class<?> clazz = null;
                    try {
                        clazz = Class.forName(packageName + "." + str);
                    } catch (ClassNotFoundException e) {
                        throw new RuntimeException(e);
                    }
                    if (clazz.isAnnotationPresent(OrmEntity.class)) {
                        createTable(clazz);
                    }
                }
            });
            stream.close();
        } catch (Exception e) {
            printError(e.getMessage());
        }
    }

    private void createTable(Class<?> clazz) {
        OrmEntity ormEntity = clazz.getAnnotation(OrmEntity.class);
        StringBuilder query = new StringBuilder(String
                .format("DROP TABLE IF EXISTS %s;", ormEntity.table()));
        System.out.println(query);
        executeQuery(query.toString());
        query = new StringBuilder(String
                .format("CREATE TABLE IF NOT EXISTS %s (%n", ormEntity.table()));
        for (Field field : clazz.getDeclaredFields()) {
            if (field.isAnnotationPresent(OrmColumnId.class)) {
                if (field.getType().getSimpleName().equals("Long")) {
                    query.insert(query.length(), String
                            .format("\tid BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,%n"));
                } else {
                    throw new IllegalAnnotationException("id must be long");
                }
            } else if (field.isAnnotationPresent(OrmColumn.class)) {
                OrmColumn column = field.getAnnotation(OrmColumn.class);
                query.insert(query.length(), String
                        .format("\t%s %s,%n", column.name(),
                                getSQLTYPE(field.getType().getSimpleName(), column.length())));
            }
        }
        query.insert(query.length(), ");");
        System.out.println(query);
        executeQuery(query.toString());
    }

    private String getSQLTYPE(String type, int len) {
        switch (type) {
            case "Integer":
                return "INT";
            case "Double":
                return "DOUBLE PRECISION";
            case "Boolean":
                return "BOOLEAN";
            case "Long":
                return "BIGINT";
            case "String":
                return "VARCHAR(" + len + ")";
            default:
                printError("Class have an unsupported type");
        }
        return "";
    }

    private void executeQuery(String query) {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.execute();
        } catch (Exception e) {
            printError(e.getMessage());
        }
    }

    private void printError(String err) {
        System.err.println(err);
        System.exit(-1);
    }

    public void save(Object entity) {
        Class<?> clazz = entity.getClass();
        if (!clazz.isAnnotationPresent(OrmEntity.class)) {
            return;
        }
        StringBuilder query = new StringBuilder(String
                .format("INSERT INTO %s ", clazz.getAnnotation(OrmEntity.class).table()));
        StringBuilder names = new StringBuilder();
        StringBuilder values = new StringBuilder();
        Field[] fields = clazz.getDeclaredFields();
        try {
            for (int i = 0; i < fields.length; ++i) {
                fields[i].setAccessible(true);
                if (fields[i].isAnnotationPresent(OrmColumn.class)) {
                    names.insert(names.length(),
                            fields[i].getAnnotation(OrmColumn.class).name() + ", ");
                    if (fields[i].getType().getSimpleName().equals("String")) {
                        values.insert(values.length(), String
                                .format("'%s', ", fields[i].get(entity)));
                    } else {
                        values.insert(values.length(), fields[i].get(entity) + ", ");
                    }
                }
            }
            names.delete(names.length() - 2, names.length());
            values.delete(values.length() - 2, values.length());
        } catch (Exception e) {
            printError(e.getMessage());
        }
        query.insert(query.length(), String
                .format("(%s) VALUES (%s);", names, values));
        System.out.println(query);
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            statement.executeQuery(query.toString());
            String getId = "CALL IDENTITY ();";
            ResultSet resultSet = statement.executeQuery(getId);
            if (resultSet.next()) {
                Field field = findIdField(entity);
                field.set(entity, resultSet.getLong(1));
            }
        } catch (Exception e) {
            printError(e.getMessage());
        }
    }

    public void update(Object entity) {
        Class<?> clazz = entity.getClass();
        if (!clazz.isAnnotationPresent(OrmEntity.class)) {
            return;
        }
        StringBuilder query = new StringBuilder(String
                .format("UPDATE %s SET ", clazz.getAnnotation(OrmEntity.class).table()));
        try {
            long id = 0;
            for (Field field : clazz.getDeclaredFields()) {
                field.setAccessible(true);
                if (field.isAnnotationPresent(OrmColumn.class)) {
                    String val;
                    if (field.getType().getSimpleName().equals("String")) {
                        val = String.format("'%s'", field.get(entity));
                    } else {
                        val = field.get(entity).toString();
                    }
                    query.insert(query.length(), String.format("%s=%s, ",
                            field.getAnnotation(OrmColumn.class).name(), val));
                } else if (field.isAnnotationPresent(OrmColumnId.class)) {
                    id = (long) field.get(entity);
                }
            }
            query.delete(query.length() - 2, query.length());
            query.insert(query.length(), String
                    .format(" WHERE id=%d;", id));
        } catch (Exception e) {
            printError(e.getMessage());
        }
        System.out.println(query);
        executeQuery(query.toString());
    }

    public <T> T findById(Long id, Class<T> aClass) {
        if (!aClass.isAnnotationPresent(OrmEntity.class)) {
            System.err.println("There is no OrmEntity annotation in the class!");
            return null;
        }
        String query = String
                .format("SELECT * FROM %s WHERE id=%d;",
                        aClass.getAnnotation(OrmEntity.class).table(), id);
        System.out.println(query);
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
             ResultSet resultSet = statement.executeQuery(query);
            if (resultSet.next()) {
                List<Class<?>> typeParams = new ArrayList<>();
                List<Object> objParams = new ArrayList<>();
                for (Field field : aClass.getDeclaredFields()) {
                    if (field.isAnnotationPresent(OrmColumn.class)) {
                        typeParams.add(field.getType());
                        objParams.add(resultSet.getObject(field
                                .getAnnotation(OrmColumn.class).name()));
                    } else if (field.isAnnotationPresent(OrmColumnId.class)) {
                        typeParams.add(Long.class);
                        objParams.add(id);
                    }
                }
                return aClass.getConstructor(typeParams.toArray(new Class<?>[0]))
                        .newInstance(objParams.toArray(new Object[0]));
            } else {
                System.err.println("There is no record in the table!");
                return null;
            }
        } catch (Exception e) {
            printError(e.getMessage());
        }
        return null;
    }

    private Field findIdField(Object entity) {
        Field res = null;
        for (Field field : entity.getClass().getDeclaredFields()) {
            if (field.isAnnotationPresent(OrmColumnId.class)) {
                res = field;
                break;
            }
        }
        if (res == null) {
            throw new RuntimeException("Class must hava an id");
        }
        res.setAccessible(true);
        return res;
    }
}
